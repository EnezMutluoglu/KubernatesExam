kubectl create namespace test

kubectl create namespace production

#install nginx
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/aws/deploy.yaml

#node tiles
master=$(kubectl get no -o jsonpath="{.items[0].metadata.name}")

node1=$(kubectl get no -o jsonpath="{.items[1].metadata.name}")

node2=$(kubectl get no -o jsonpath="{.items[2].metadata.name}")

node3=$(kubectl get no -o jsonpath="{.items[3].metadata.name}")

kubectl taint node $master node-role.kubernetes.io/controlplane:NoSchedule
kubectl taint node $master node-role.kubernetes.io/etcd:NoSchedule

kubectl taint node $node1 tier=production:NoSchedule

kubectl taint node $node2 tier=production:NoSchedule

kubectl taint node $node3 tier=production:NoSchedule

kubectl label node $node1 tier=production

kubectl label node $node2 tier=production

kubectl label node $node3 tier=production


#Wordpress ve mysql secrest yaratarak değişkenleri saklıyoruz Test için
kubectl create secret generic postgresql-test-secret -n test --from-file=POSTGRES_ROOT_PASSWORD=./yaml/mysql_root_password.txt --from-file=POSTGRES_USER=./yaml/mysql_user.txt --from-file=POSTGRES_PASSWORD=./yaml/mysql_password.txt --from-file=POSTGRES_DATABASE=./yaml/mysql_database.txt

#yukardakinin production ortamı için
kubectl create secret generic mysql-prod-secret -n production --from-file=MYSQL_ROOT_PASSWORD=./yaml/mysql_root_password.txt --from-file=MYSQL_USER=./yaml/mysql_user.txt --from-file=MYSQL_PASSWORD=./yaml/mysql_password.txt --from-file=MYSQL_DATABASE=./yaml/mysql_database.txt

#Deploy mysql ve wordpress
kubectl apply -f ./yaml/wptest.yaml

kubectl apply -f ./yaml/wpprod.yaml

#service üzerinden erişim için ingress hariç
kubectl port-forward deployment/wp-deployment -n test 8080:80

kubectl port-forward deployment/wp-deployment -n production 8080:80

#ingress yüklendi
kubectl apply -f ./yaml/wpingress.yaml

#ingressleri yönlendirmeyi görmek için
kubectl get ingress -A -w

#proje dosyasında bir deneme yapılıyor 
kubectl apply -f ./yaml/deployment.yaml

#bir önceki yapılan işlemi dış dünyaya loadbalancer ile bağla işlemi yapılıcak
kubectl expose deployment k8s-deployment --type=LoadBalancer -n production

#replica sayısı 3 e indirildi.
kubectl scale deployment k8s-deployment --replicas=3 -n production
#replica sayısı 10 a çıkarıldı.
kubectl scale deployment k8s-deployment --replicas=10 -n production
#replica güncellendi.
kubectl set image deployment/k8s-deployment k8s=ozgurozturknet/k8s:v2 -n production

#demonset oluşturma içinde host log sistemi vardır.
kubectl apply -f ./yaml/daemonset.yaml

#statefullset olrak mongodb çalıştırıyoruz
kubectl apply -f ./yaml/statefulset.yaml

#mongodb başlangıoçta kendisi ayağa kalkmaz elle yapılmalı
kubectl exec -it mongostatefulset-0 -- bash

#mongoya geç
mongo 

#0 ve 1 diye makina var onu ayaga kaldır
rs.initiate({ _id: "MainRepSet", version: 1, 
members: [ 
 { _id: 0, host: "mongostatefulset-0.mongo-svc.default.svc.cluster.local:27017" }, 
 { _id: 1, host: "mongostatefulset-1.mongo-svc.default.svc.cluster.local:27017" } ]});

#kullanıcı ekleme
db.getSiblingDB("admin").createUser({
...       user : "mongoadmin",
...       pwd  : "P@ssw0rd!1",
...       roles: [ { role: "root", db: "admin" } ]
...  });

rs.status();

#service accond eklendi
kubectl apply -f ./yaml/serviceaccount.yaml
#poda bağlanma
kubectl exec -it pod-proje -- bash

#curl ile service e erişme token ı
CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
curl --cacert $CERT https://kubernetes/api/v1/pods --header "Authorization:Bearer $TOKEN" | jq '.items[].metadata.name'

#Worker node'lardan bir tanesinin üzerindeki tüm podları tahliye edin ve 
#ardından yeni pod schedule edilememesini sağlayın.

nodedrain=$(kubectl get no -o jsonpath="{.items[3].metadata.name}")

kubectl drain $nodedrain --ignore-daemonsets --delete-local-data

kubectl cordon $nodedrain


# login to master node
# create a new bootstrap token
$ kubeadm token create
abcdef.1234567890abcdef

# get root ca cert fingerprint
$ openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
e18105ef24bacebb23d694dad491e8ef1c2ea9ade944e784b1f03a15a0d5ecea 

# login to the new worker node
# join to cluster 
$ kubeadm join --token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:e18105ef24bacebb23d694dad491e8ef1c2ea9ade944e784b1f03a15a0d5ecea 1.2.3.4:6443


#taintleri listeleme
kubectl get nodes -o json | jq '.items[].spec.taints'